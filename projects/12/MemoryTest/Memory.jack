// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */
class Memory {
    static Array headAdr;

    /** Initializes the class. */
    function void init() {
        let headAdr = 2048;
        let headAdr[0] = 16383 - headAdr;
        let headAdr[1] = null;

        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        var Array memory;
        let memory = 0;
        return memory[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        var Array memory;
        let memory = 0;
        let memory[address] = value;
        return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
        var Array blockAdr;
        var Array freeAdr;
        var Array prevBlockAdr;
        var boolean found;

        let blockAdr = null;
        let freeAdr = headAdr;
        let prevBlockAdr = null;
        let found = false;

        while ((~(freeAdr = null)) | found) {
            // 指定されたサイズとサイズ保持用の領域、合わせて (size + 1) 必要
            if (freeAdr[0] = (size + 1)) {
                // 必要なサイズと同一のサイズのブロックが見つかった
                let found = true;
                let blockAdr = freeAdr + 1;
                //// freeList の更新
                // 前のブロックが見つかったブロックの next を指すようにする
                let prevBlockAdr[1] = freeAdr[1];
            }
            if (freeAdr[0] > (size + 1)) {
                // 必要なサイズより大きいサイズのブロックが見つかった
                let found = true;
                // 見つかったブロックのサイズから返却用のサイズを引く
                let freeAdr[0] = freeAdr[0] - (size + 1);

                // 返却用ブロックを指すようにする
                let blockAdr = freeAdr[0] + (freeAdr + 1);
                let blockAdr[-1] = size + 1;
            }
            // 次のブロックへ
            let prevBlockAdr = freeAdr;
            let freeAdr = freeAdr[1]; // freeAdr[1]に next が設定してある
        }

        return blockAdr;
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
        var Array segment;

        let segment = o - 1;
        let segment[0] = o[- 1]; // サイズ

        // freeList に segment を追加する
        let segment[1] = headAdr;
        let headAdr = segment;
        
        return;
    }
}
