// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
    field int length;
    field int allocLength;
    field Array stringArray;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        let length = 0;
        let allocLength = maxLength;
        if (maxLength > 0) {
            let stringArray = Memory.alloc(maxLength);
        }
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        if (allocLength > 0) {
            do Memory.deAlloc(stringArray);
        }
        do Memory.deAlloc(this);
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return length;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        return stringArray[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        let stringArray[j] = c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        let stringArray[length] = c;
        let length = length + 1;
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        let length = length - 1;
        return;
    }

    /** Returns the integer value of this string,
     *  until a non-digit character is detected. */
    method int intValue() {
        var int retInt;
        var int currentIdx;
        var int endIdx;  
        var int digit;

        let retInt = 0;
        let currentIdx = length() - 1;
        let endIdx = 0;
        let digit = 1;

        if (charAt(0) = 45) {
            // 先頭が"-"の場合
            let endIdx = 1;
        }
        
        while (currentIdx < endIdx - 1) {
            let retInt = retInt + ((charAt(currentIdx) - 48) * digit);
            let digit = digit * 10;
            let currentIdx = currentIdx - 1;
        }

        if (charAt(0) = 45) {
            // 先頭が"-"の場合
            let retInt = -retInt;
        }
        
        return retInt;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        let length = 0;

        if (val < 0) {
            do appendChar(45); // -
            let val = -val;
        }
        do appendIntValue(val);

        return;
    }

    method void appendIntValue(int val) {
        var int lastDigit;
        var int quotient;

        let quotient = (val / 10);

        let lastDigit = val - (quotient * 10);

        if (val < 10) {
            do appendChar(lastDigit + 48);
        }
        else {
            do appendIntValue(val / 10);
            do appendChar(lastDigit + 48);
        }

        return;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}
